'use strict';

var fs = require('fs');
var url = require('url');
var Promise = require('promise');
var request = Promise.denodeify(require('request'));
var parseDOM = require('htmlparser2').parseDOM;

var sections = [
  'collection',
  'cursor',
  'database',
  'replication',
  'sharding',
  'subprocess',
  'connection',
  'native'
]

var page = 'http://docs.mongodb.org/manual/reference/method/';

request(page).then(function (res) {
  if (res.statusCode !== 200) {
    throw new Error('Invalid status code ' + res.statusCode);
  }
  return res.body.toString();
}).done(function (body) {
  body = parseDOM(body);
  var output = {};
  sections.forEach(function (section) {
    output[section] = parseSection(section, body).map(simplifyName);
  });
  output['objectid'] = parseSection('constructors', body).filter(function (method) {
    return /^ObjectId\./.test(method.name);
  }).map(simplifyName);
  fs.writeFileSync(__dirname + '/index.js', '"use strict";\n// this file is auto-generated by build.js\nmodule.exports = ' + JSON.stringify(output, null, '  ') + ';');
  fs.writeFileSync(__dirname + '/data.json', JSON.stringify(output, null, '  '));
});

function simplifyName(method) {
  return {
    name: /([^\.\(\)]+)(\(\))?$/.exec(method.name)[1],
    description: method.description,
    href: method.href
  };
}

function parseSection(section, body) {
  var div = getById(body, section);
  var table = getByTagType(div, 'tbody')[0];
  var rows = getByTagType(table, 'tr');
  return rows.map(function (row) {
    var cells = getByTagType(row, 'td').map(getText);
    var a = getByTagType(row, 'a')[0];
    var href = page;
    if (a && a.attribs && a.attribs.href) {
      href = url.resolve(page, a.attribs.href);
    }
    return {
      name: cells[0],
      description: cells[1],
      href: href
    };
  });
}

function getById(parent, id) {
  if (Array.isArray(parent)) {
    for (var i = 0; i < parent.length; i++) {
      var val = getById(parent[i], id);
      if (val) return val;
    }
    return null;
  }
  if (parent.attribs
  && parent.attribs.id
  && parent.attribs.id.toLowerCase() === id.toLowerCase()) {
    return parent;
  }
  if (parent.children) {
    return getById(parent.children, id);
  }
  return null;
}
function getByTagType(parent, tagType) {
  if (Array.isArray(parent)) {
    return parent.map(function (child) {
      return getByTagType(child, tagType);
    }).reduce(function (acc, val) {
      return acc.concat(val);
    }, [])
  }
  if (parent.type === 'tag'
  && parent.name.toLowerCase() === tagType.toLowerCase()) {
    return [parent];
  }
  if (parent.children) {
    return getByTagType(parent.children, tagType);
  }
  return [];
}
function getText(parent) {
  if (Array.isArray(parent)) {
    return parent.map(function (child) {
      return getText(child);
    }).reduce(function (acc, val) {
      return acc + val;
    }, '')
  }
  if (parent.type === 'text') {
    return parent.data;
  }
  if (parent.children) {
    return getText(parent.children);
  }
  return '';
}